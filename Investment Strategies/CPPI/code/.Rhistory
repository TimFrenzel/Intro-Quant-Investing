scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
plot <- ggplot(allocation_long, aes(x = Date, y = value, fill = variable, text = paste(variable, value))) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 100), breaks = seq(0, 100, by = 20)) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation Percentage",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
ggplot(allocation_long, aes(x = Date, y = value, fill = variable)) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 100), breaks = seq(0, 100, by = 20)) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation Percentage",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
allocation_long <- reshape2::melt(allocation_df, id.vars = "Date", measure.vars = c("Pct_Risky", "Pct_Safe"))
ggplot(allocation_long, aes(x = Date, y = value, fill = variable)) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format()) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
# Calculate the percentage allocations
allocation_df$Total = allocation_df$Risky + allocation_df$Safe
allocation_df$Pct_Risky = allocation_df$Risky / allocation_df$Total * 1000
allocation_df$Pct_Safe = allocation_df$Safe / allocation_df$Total * 1000
# Reshape data for stacking in ggplot2
allocation_long <- reshape2::melt(allocation_df, id.vars = "Date", measure.vars = c("Pct_Risky", "Pct_Safe"))
ggplot(allocation_long, aes(x = Date, y = value, fill = variable)) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format()) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
ggplot(allocation_long, aes(x = Date, y = value, fill = variable)) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format()) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
shiny::runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
# Example usage with hypothetical returns and parameters
risky_returns <- c(0.05, -0.02, 0.03, -0.01, 0.07)
safe_returns <- rep(0.01, 5)  # Constant safe asset return
initial_floor <- 0.8
multiplier <- 3
dates <- as.Date(c("2020-12-31", "2021-12-31", "2022-12-31", "2023-12-31", "2024-12-31"))
cppi_result <- cppi_strategy(risky_returns, safe_returns, initial_floor, multiplier, dates)
cppi_result
cppi_result <- cppi_strategy(risky_returns, safe_returns, initial_floor, multiplier, dates, floor_values)
cppi_result <- cppi_strategy(risky_returns, safe_returns, initial_floor, multiplier, dates)
cppi_result
risky_returns <- c(0.05, -0.02, 0.03, -0.01, 0.07)
safe_returns <- rep(0.01, 5)  # Constant safe asset return
initial_floor <- 0.8
multiplier <- 3
dates <- as.Date(c("2020-12-31", "2021-12-31", "2022-12-31", "2023-12-31", "2024-12-31"))
cppi_result <- cppi_strategy(risky_returns, safe_returns, initial_floor, multiplier, dates)
cppi_result
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
# Example usage with hypothetical returns and parameters
risky_returns <- c(0.05, -0.02, 0.03, -0.01, 0.07)
safe_returns <- rep(0.01, 5)  # Constant safe asset return
initial_floor <- 0.8
multiplier <- 3
dates <- as.Date(c("2020-12-31", "2021-12-31", "2022-12-31", "2023-12-31", "2024-12-31"))
cppi_result <- cppi_strategy(risky_returns, safe_returns, initial_floor, multiplier, dates)
cppi_result
# Example usage with hypothetical returns and parameters
risky_returns <- c(0.05, -0.02, 0.03, -0.01, 0.07)
safe_returns <- rep(0.01, 5)  # Constant safe asset return
initial_floor <- 0.8
multiplier <- 3
dates <- as.Date(c("2020-12-31", "2021-12-31", "2022-12-31", "2023-12-31", "2024-12-31"))
cppi_result <- cppi_strategy(
risky_returns = risky_returns,
safe_returns = safe_returns,
dates = dates,
floor = floor,
multiplier = multiplier
)
# Example usage with hypothetical returns and parameters
risky_returns <- c(0.05, -0.02, 0.03, -0.01, 0.07)
safe_returns <- rep(0.01, 5)  # Constant safe asset return
floor  <- 0.8
multiplier <- 3
dates <- as.Date(c("2020-12-31", "2021-12-31", "2022-12-31", "2023-12-31", "2024-12-31"))
cppi_result <- cppi_strategy(
risky_returns = risky_returns,
safe_returns = safe_returns,
dates = dates,
floor = floor,
multiplier = multiplier
)
cppi_result
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
cum_returns_df <- data.frame(
Date = index(risky_returns)[-1],
Risky = cumprod(1 + risky_returns[-1]) - 1,
Safe = cumprod(1 + safe_returns[-1]) - 1,
CPPI = cum_cppi_returns,
Floor = rep(floor_value * 100, length(cum_cppi_returns))  # Convert to percentage
)
# Calculate cumulative returns for plotting
cum_cppi_returns <- cumprod(1 + cppi_results$portfolio_returns[-1]) - 1
cppi_results <- cppi_strategy(as.numeric(risky_returns), as.numeric(safe_returns), index(risky_returns),
floor = floor_value, multiplier = input$multiplierSlider)
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
cum_floor
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
plot(global_floor_value)
#--------------- Load Required Packages ---------------
library(quantmod)
library(lubridate)
library(ggplot2)
library(plotly)
#--------------- Load Required Function ---------------
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("CPPI.R")
#--------------- Functions ---------------
get_data <- function(ticker, start_date, end_date) {
getSymbols(ticker, src = "yahoo", from = start_date, to = end_date, auto.assign = FALSE)
}
calculate_returns <- function(prices) {
returns <- diff(log(Ad(prices)))
return(c(NA, returns))  # Proper NA handling
}
#--------------- Fetch and Prepare Data ---------------
start_date <- Sys.Date() - years(5)
end_date <- Sys.Date()
# Fetch data
spy_data <- get_data("SPY", start_date, end_date)
agg_data <- get_data("AGG", start_date, end_date)
# Calculate returns
spy_returns <- calculate_returns(spy_data)[-c(1:2)]
agg_returns <- calculate_returns(agg_data)[-c(1:2)]
# Dates for the CPPI function
dates <- index(spy_data)[-1]
#--------------- Apply CPPI Strategy ---------------
floor <- 0.8  # Initial portfolio value
multiplier <- 4  # Level of exposure to the risky asset
# Apply the CPPI strategy
cppi_result <- cppi_strategy(as.numeric(spy_returns), as.numeric(agg_returns), floor, multiplier, dates)
#--------------- Load Required Packages ---------------
library(quantmod)
library(lubridate)
library(ggplot2)
library(plotly)
#--------------- Load Required Function ---------------
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("CPPI.R")
#--------------- Functions ---------------
get_data <- function(ticker, start_date, end_date) {
getSymbols(ticker, src = "yahoo", from = start_date, to = end_date, auto.assign = FALSE)
}
calculate_returns <- function(prices) {
returns <- diff(log(Ad(prices)))
return(c(NA, returns))  # Proper NA handling
}
#--------------- Fetch and Prepare Data ---------------
start_date <- Sys.Date() - years(5)
end_date <- Sys.Date()
# Fetch data
spy_data <- get_data("SPY", start_date, end_date)
agg_data <- get_data("AGG", start_date, end_date)
# Calculate returns
spy_returns <- calculate_returns(spy_data)[-c(1:2)]
agg_returns <- calculate_returns(agg_data)[-c(1:2)]
# Dates for the CPPI function
dates <- index(spy_data)[-1]
#--------------- Apply CPPI Strategy ---------------
floor <- 0.8  # Initial portfolio value
multiplier <- 4  # Level of exposure to the risky asset
# Apply the CPPI strategy
cppi_result <- cppi_strategy(
risky_returns = as.numeric(spy_returns),
safe_returns = as.numeric(agg_returns),
dates = dates,
floor = floor,
multiplier = multiplier
)
#--------------- Visualize Cumulative Returns ---------------
cum_spy_returns <- cumprod(1 + spy_returns[-1]) - 1
cum_agg_returns <- cumprod(1 + agg_returns[-1]) - 1
cum_cppi_returns <- cumprod(1 + cppi_result$portfolio_returns[-1]) - 1
cum_returns_df <- data.frame(Date = dates[-1], SPY = cum_spy_returns, AGG = cum_agg_returns, CPPI = cum_cppi_returns)
# Plot using ggplot2
ggplot(cum_returns_df, aes(x = Date)) +
geom_line(aes(y = SPY, colour = "SPY"), size = 1) +
geom_line(aes(y = AGG, colour = "AGG"), size = 1) +
geom_line(aes(y = CPPI, colour = "CPPI"), size = 1) +
labs(title = "Cumulative Returns Comparison", y = "Cumulative Returns", x = "Date") +
scale_colour_manual("", values = c("SPY" = "black", "AGG" = "grey", "CPPI" = "blue")) +
theme_minimal()
#--------------- Visualize Allocations ---------------
#--------------- Prepare Data ---------------
allocation_df <- data.frame(Date = dates, Risky = cppi_result$allocation_risky, Safe = cppi_result$allocation_safe)
# Calculate the percentage allocations
allocation_df$Total = allocation_df$Risky + allocation_df$Safe
allocation_df$Pct_Risky = allocation_df$Risky / allocation_df$Total * 1000
allocation_df$Pct_Safe = allocation_df$Safe / allocation_df$Total * 1000
# Reshape data for stacking in ggplot2
allocation_long <- reshape2::melt(allocation_df, id.vars = "Date", measure.vars = c("Pct_Risky", "Pct_Safe"))
ggplot(allocation_long, aes(x = Date, y = value, fill = variable)) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format()) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
cppi_result$floor_value
#--------------- Load Required Packages ---------------
library(quantmod)
library(lubridate)
library(ggplot2)
library(plotly)
#--------------- Load Required Function ---------------
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("CPPI.R")
#--------------- Functions ---------------
get_data <- function(ticker, start_date, end_date) {
getSymbols(ticker, src = "yahoo", from = start_date, to = end_date, auto.assign = FALSE)
}
calculate_returns <- function(prices) {
returns <- diff(log(Ad(prices)))
return(c(NA, returns))  # Proper NA handling
}
#--------------- Fetch and Prepare Data ---------------
start_date <- Sys.Date() - years(5)
end_date <- Sys.Date()
# Fetch data
spy_data <- get_data("SPY", start_date, end_date)
agg_data <- get_data("AGG", start_date, end_date)
# Calculate returns
spy_returns <- calculate_returns(spy_data)[-c(1:2)]
agg_returns <- calculate_returns(agg_data)[-c(1:2)]
# Dates for the CPPI function
dates <- index(spy_data)[-1]
#--------------- Apply CPPI Strategy ---------------
floor <- 0.8  # Initial portfolio value
multiplier <- 4  # Level of exposure to the risky asset
# Apply the CPPI strategy
cppi_result <- cppi_strategy(
risky_returns = as.numeric(spy_returns),
safe_returns = as.numeric(agg_returns),
dates = dates,
floor = floor,
multiplier = multiplier
)
cppi_result$floor_value
#--------------- Visualize Cumulative Returns ---------------
cum_spy_returns <- cumprod(1 + spy_returns[-1]) - 1
cum_agg_returns <- cumprod(1 + agg_returns[-1]) - 1
cum_cppi_returns <- cumprod(1 + cppi_result$portfolio_returns[-1]) - 1
cum_returns_df <- data.frame(Date = dates[-1], SPY = cum_spy_returns, AGG = cum_agg_returns, CPPI = cum_cppi_returns)
# Plot using ggplot2
ggplot(cum_returns_df, aes(x = Date)) +
geom_line(aes(y = SPY, colour = "SPY"), size = 1) +
geom_line(aes(y = AGG, colour = "AGG"), size = 1) +
geom_line(aes(y = CPPI, colour = "CPPI"), size = 1) +
labs(title = "Cumulative Returns Comparison", y = "Cumulative Returns", x = "Date") +
scale_colour_manual("", values = c("SPY" = "black", "AGG" = "grey", "CPPI" = "blue")) +
theme_minimal()
#--------------- Visualize Allocations ---------------
#--------------- Prepare Data ---------------
allocation_df <- data.frame(Date = dates, Risky = cppi_result$allocation_risky, Safe = cppi_result$allocation_safe)
# Calculate the percentage allocations
allocation_df$Total = allocation_df$Risky + allocation_df$Safe
allocation_df$Pct_Risky = allocation_df$Risky / allocation_df$Total * 1000
allocation_df$Pct_Safe = allocation_df$Safe / allocation_df$Total * 1000
# Reshape data for stacking in ggplot2
allocation_long <- reshape2::melt(allocation_df, id.vars = "Date", measure.vars = c("Pct_Risky", "Pct_Safe"))
ggplot(allocation_long, aes(x = Date, y = value, fill = variable)) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format()) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
View(cppi_result)
#--------------- Load Required Packages ---------------
library(quantmod)
library(lubridate)
library(ggplot2)
library(plotly)
#--------------- Load Required Function ---------------
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("CPPI.R")
# Example usage with hypothetical returns and parameters
risky_returns <- c(0.05, -0.02, 0.03, -0.01, 0.07)
safe_returns <- rep(0.01, 5)  # Constant safe asset return
floor  <- 0.8
multiplier <- 3
dates <- as.Date(c("2020-12-31", "2021-12-31", "2022-12-31", "2023-12-31", "2024-12-31"))
cppi_result <- cppi_strategy(
risky_returns = risky_returns,
safe_returns = safe_returns,
dates = dates,
floor = floor,
multiplier = multiplier
)
cppi_result
#--------------- Load Required Packages ---------------
library(quantmod)
library(lubridate)
library(ggplot2)
library(plotly)
#--------------- Load Required Function ---------------
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("CPPI.R")
#--------------- Load Required Packages ---------------
library(quantmod)
library(lubridate)
library(ggplot2)
library(plotly)
#--------------- Load Required Function ---------------
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("CPPI.R")
#--------------- Functions ---------------
get_data <- function(ticker, start_date, end_date) {
getSymbols(ticker, src = "yahoo", from = start_date, to = end_date, auto.assign = FALSE)
}
calculate_returns <- function(prices) {
returns <- diff(log(Ad(prices)))
return(c(NA, returns))  # Proper NA handling
}
#--------------- Fetch and Prepare Data ---------------
start_date <- Sys.Date() - years(5)
end_date <- Sys.Date()
# Fetch data
spy_data <- get_data("SPY", start_date, end_date)
agg_data <- get_data("AGG", start_date, end_date)
# Calculate returns
spy_returns <- calculate_returns(spy_data)[-c(1:2)]
agg_returns <- calculate_returns(agg_data)[-c(1:2)]
# Dates for the CPPI function
dates <- index(spy_data)[-1]
#--------------- Apply CPPI Strategy ---------------
floor <- 0.8  # Initial portfolio value
multiplier <- 4  # Level of exposure to the risky asset
# Apply the CPPI strategy
cppi_result <- cppi_strategy(
risky_returns = as.numeric(spy_returns),
safe_returns = as.numeric(agg_returns),
dates = dates,
floor = floor,
multiplier = multiplier
)
#--------------- Visualize Cumulative Returns ---------------
cum_spy_returns <- cumprod(1 + spy_returns[-1]) - 1
cum_agg_returns <- cumprod(1 + agg_returns[-1]) - 1
cum_cppi_returns <- cumprod(1 + cppi_result$portfolio_returns[-1]) - 1
cum_returns_df <- data.frame(Date = dates[-1], SPY = cum_spy_returns, AGG = cum_agg_returns, CPPI = cum_cppi_returns)
# Plot using ggplot2
ggplot(cum_returns_df, aes(x = Date)) +
geom_line(aes(y = SPY, colour = "SPY"), size = 1) +
geom_line(aes(y = AGG, colour = "AGG"), size = 1) +
geom_line(aes(y = CPPI, colour = "CPPI"), size = 1) +
labs(title = "Cumulative Returns Comparison", y = "Cumulative Returns", x = "Date") +
scale_colour_manual("", values = c("SPY" = "black", "AGG" = "grey", "CPPI" = "blue")) +
theme_minimal()
#--------------- Visualize Allocations ---------------
#--------------- Prepare Data ---------------
allocation_df <- data.frame(Date = dates, Risky = cppi_result$allocation_risky, Safe = cppi_result$allocation_safe)
# Calculate the percentage allocations
allocation_df$Total = allocation_df$Risky + allocation_df$Safe
allocation_df$Pct_Risky = allocation_df$Risky / allocation_df$Total * 1000
allocation_df$Pct_Safe = allocation_df$Safe / allocation_df$Total * 1000
# Reshape data for stacking in ggplot2
allocation_long <- reshape2::melt(allocation_df, id.vars = "Date", measure.vars = c("Pct_Risky", "Pct_Safe"))
ggplot(allocation_long, aes(x = Date, y = value, fill = variable)) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format()) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
View(cppi_result)
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
global_floor_value
#--------------- Load Required Packages ---------------
library(quantmod)
library(lubridate)
library(ggplot2)
library(plotly)
#--------------- Load Required Function ---------------
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("CPPI.R")
#--------------- Functions ---------------
get_data <- function(ticker, start_date, end_date) {
getSymbols(ticker, src = "yahoo", from = start_date, to = end_date, auto.assign = FALSE)
}
calculate_returns <- function(prices) {
returns <- diff(log(Ad(prices)))
return(c(NA, returns))  # Proper NA handling
}
#--------------- Fetch and Prepare Data ---------------
start_date <- Sys.Date() - years(5)
end_date <- Sys.Date()
# Fetch data
spy_data <- get_data("SPY", start_date, end_date)
agg_data <- get_data("AGG", start_date, end_date)
# Calculate returns
spy_returns <- calculate_returns(spy_data)[-c(1:2)]
agg_returns <- calculate_returns(agg_data)[-c(1:2)]
# Dates for the CPPI function
dates <- index(spy_data)[-1]
#--------------- Apply CPPI Strategy ---------------
floor <- 0.8  # Initial portfolio value
multiplier <- 4  # Level of exposure to the risky asset
# Apply the CPPI strategy
cppi_result <- cppi_strategy(
risky_returns = as.numeric(spy_returns),
safe_returns = as.numeric(agg_returns),
dates = dates,
floor = floor,
multiplier = multiplier
)
#--------------- Visualize Cumulative Returns ---------------
cum_spy_returns <- cumprod(1 + spy_returns[-1]) - 1
cum_agg_returns <- cumprod(1 + agg_returns[-1]) - 1
cum_cppi_returns <- cumprod(1 + cppi_result$portfolio_returns[-1]) - 1
cum_returns_df <- data.frame(Date = dates[-1], SPY = cum_spy_returns, AGG = cum_agg_returns, CPPI = cum_cppi_returns)
# Plot using ggplot2
ggplot(cum_returns_df, aes(x = Date)) +
geom_line(aes(y = SPY, colour = "SPY"), size = 1) +
geom_line(aes(y = AGG, colour = "AGG"), size = 1) +
geom_line(aes(y = CPPI, colour = "CPPI"), size = 1) +
labs(title = "Cumulative Returns Comparison", y = "Cumulative Returns", x = "Date") +
scale_colour_manual("", values = c("SPY" = "black", "AGG" = "grey", "CPPI" = "blue")) +
theme_minimal()
#--------------- Visualize Allocations ---------------
#--------------- Prepare Data ---------------
allocation_df <- data.frame(Date = dates, Risky = cppi_result$allocation_risky, Safe = cppi_result$allocation_safe)
# Calculate the percentage allocations
allocation_df$Total = allocation_df$Risky + allocation_df$Safe
allocation_df$Pct_Risky = allocation_df$Risky / allocation_df$Total * 1000
allocation_df$Pct_Safe = allocation_df$Safe / allocation_df$Total * 1000
# Reshape data for stacking in ggplot2
allocation_long <- reshape2::melt(allocation_df, id.vars = "Date", measure.vars = c("Pct_Risky", "Pct_Safe"))
ggplot(allocation_long, aes(x = Date, y = value, fill = variable)) +
geom_area(position = 'stack') +
scale_y_continuous(labels = scales::percent_format()) +
labs(
title = "CPPI Allocations Over Time",
x = "Date",
y = "Allocation",
fill = "Asset Class"
) +
scale_fill_manual(values = c("Pct_Risky" = "blue", "Pct_Safe" = "grey")) +
theme_minimal()
plot(cppi_result$floor_values)
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
global_floor_value
plot(global_floor_value)
runApp('F:/001_Github/Intro-Quant-Investing/AWS Deployed')
