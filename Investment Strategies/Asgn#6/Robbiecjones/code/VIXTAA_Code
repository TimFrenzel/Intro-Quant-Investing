library(tidyverse)
library(lubridate)
library(PerformanceAnalytics)
library(TTR)
library(ggplot2)
library(DT)
library(xts)
library(dplyr)
library(dplyr)
library(zoo) # For as.yearqtr
library(lubridate)
library(tseries)
library(ISOweek)
library(reshape2)
library(data.table)
library(quantmod)

read_and_preprocess_data <- function(file_path) {
  prices <- read.csv(file_path)
  prices$Dates <- as.Date(prices$Dates, format="%m/%d/%Y")
  return(prices)
}


data_cleaning <- function(prices) {
  # Iterate over all columns except for the first (Dates) column
  for (col_name in names(prices)[-1]) {
    # Convert the column to numeric, forcing non-convertible values to NA
    # This will convert '#N/A' and other non-numeric values to NA
    prices[[col_name]] <- as.numeric(as.character(prices[[col_name]]))
    # Check for any NA values and replace them with the previous day's value
    for (i in 2:nrow(prices)) {
      if (is.na(prices[i, col_name])) {
        prices[i, col_name] <- prices[i - 1, col_name]
      }
    }
  }
  # Warning if NAs are found in the first row, as they cannot be replaced by the previous day's value
  if (sum(sapply(prices[1, -1], is.na)) > 0) {
    warning("NAs found in the first row cannot be replaced by previous day's value.")
  }
  return(prices)
}


convert_cumulative_to_daily_returns <- function(prices) {
  # Initialize a new data frame with the Dates column from the given prices data frame
  daily_returns <- data.frame(Dates = prices$Dates)
  # Iterate over all columns in the prices data frame except for the Dates column
  for (col_name in names(prices)[-1]) {  # -1 excludes the first column
    # Convert cumulative returns to price
    price_data <- 100 * (1 + (prices[[col_name]] / 100))
    # Calculate daily returns for the price data
    # Using diff() to calculate the change from the previous day and dividing by the value of the previous day
    daily_return <- c(NA, diff(price_data) / head(price_data, -1))
    # Add the calculated daily returns as a new column to the daily_returns data frame
    # Naming the column with original column name appended with '_Daily_Return'
    daily_return_col_name <- paste(col_name, "Daily_Return", sep = "_")
    daily_returns[[daily_return_col_name]] <- daily_return
    for (col_name in names(daily_returns)[-1]) {  # -1 excludes the first column ('Dates')
      daily_returns[1, col_name] <- 0
    }
  }
  return(daily_returns)
}



file_path <- "assingment6data.csv"
prices <- read_and_preprocess_data(file_path)
prices <- data_cleaning(prices)
most_recent_date <- max(prices$Dates)
cutoff_date <- as.Date(most_recent_date)
# Filter the dataset to include only data after the cutoff date
prices_filtered <- prices %>%
  filter(Dates > cutoff_date)
daily_returns <- convert_cumulative_to_daily_returns(prices)


vix_data <- read.csv("^VIX.csv")
# Convert the date columns to Date type if necessary

# Adjust the date formats
daily_returns <- daily_returns %>%
  mutate(Dates = as.Date(Dates, format="%Y-%m-%d"))  # Adjust if your format is different

vix_data <- vix_data %>%
  mutate(Dates = as.Date(Date, format="%m/%d/%Y"))
# Merge datasets by date
merged_data <- daily_returns %>%
  left_join(vix_data, by = "Dates")
merged_data$Vix <- merged_data$Close


library(zoo)

# Create a column identifying the quarter for each date
merged_data$Dates <- as.Date(merged_data$Dates)
merged_data$quarter <- as.yearqtr(merged_data$Dates)

# Find the last day in each quarter in your data
quarter_ends <- aggregate(Dates ~ quarter, data = merged_data, max)

# Assuming 'vix' is the column with the issue
merged_data$Vix <- as.character(merged_data$Vix)  # Ensure the column is character to replace "null"
merged_data$Vix[merged_data$Vix == "null"] <- NA  # Replace "null" with NA
merged_data$Vix <- as.numeric(merged_data$Vix)   # Convert back to numeric, NA stays NA
library(zoo)

# Forward fill NA values
merged_data$Vix <- na.locf(merged_data$Vix)
# Check if there are still any NA values




merged_data$portfolio_value[1] <- 100000

# Loop through the data frame to cumulatively calculate portfolio value
for (i in 2:nrow(merged_data)) {
  merged_data$portfolio_value[i] <- merged_data$portfolio_value[i-1] * merged_data$portfolio_multiplier[i]
}
# Quarterly rebalancing only impacts the multiplier at the end of each quarter
merged_data$portfolio_multiplier <- ifelse(merged_data$Dates == merged_data$end_of_quarter, merged_data$portfolio_multiplier, NA)
merged_data$portfolio_multiplier <- na.locf(merged_data$portfolio_multiplier)  # Carry forward the last multiplier

# Recalculate the portfolio values starting from the first value
merged_data$portfolio_value[1] <- 100000
for (i in 2:nrow(merged_data)) {
  merged_data$portfolio_value[i] <- merged_data$portfolio_value[i-1] * merged_data$portfolio_multiplier[i]
}
# Plotting total portfolio value over time
plot(merged_data$Dates, merged_data$portfolio_value, type = 'l', col = 'blue', main = 'Portfolio Value Over Time', xlab = 'Date', ylab = 'Portfolio Value')

# Calculate summary statistics
summary_stats <- summary(merged_data$portfolio_value)
print(summary_stats)




# Impute with median VIX value
# Calculate min and max VIX values
na.omit(merged_data$Vix)
min_vix <- min(merged_data$Vix, na.rm = TRUE)
max_vix <- max(merged_data$Vix, na.rm = TRUE)

# Define decile breakpoints from min to max VIX
vix_decile_breaks <- seq(min_vix, max_vix, length.out = 11)
# Categorize VIX into deciles using custom breakpoints
# Categorize VIX into deciles using custom breakpoints
merged_data$vix_decile <- cut(merged_data$Vix, breaks = vix_decile_breaks, include.lowest = TRUE, labels = 1:10)
# Define allocation to equities and bonds based on VIX decile
merged_data$bond_allocation <- as.numeric(merged_data$vix_decile) / 10
merged_data$equity_allocation <- 1 - merged_data$bond_allocation
# Apply allocations to compute daily portfolio values based on returns
# Assuming daily_returns is the return rate (e.g., 0.01 for 1% return)



merged_data$portfolio_equity_value <- merged_data$equity_allocation * merged_data$SPX.Index_Daily_Return
merged_data$portfolio_bond_value <- merged_data$bond_allocation * merged_data$LBUSTRUU.Index_Daily_Return

# Calculate the total portfolio value change for each day
merged_data$portfolio_total_value <- merged_data$portfolio_equity_value + merged_data$portfolio_bond_value

# Recalculate equity and bond contributions to the portfolio
# Initial allocations based on the first day's data
merged_data$portfolio_equity_value <- merged_data$portfolio_value[1] * merged_data$equity_allocation[1]
merged_data$portfolio_bond_value <- merged_data$portfolio_value[1] * merged_data$bond_allocation[1]

# Apply daily returns for each component
for (i in 2:nrow(merged_data)) {
  merged_data$portfolio_equity_value[i] <- merged_data$portfolio_equity_value[i-1] * (1 + merged_data$SPX.Index_Daily_Return[i])
  merged_data$portfolio_bond_value[i] <- merged_data$portfolio_bond_value[i-1] * (1 + merged_data$LBUSTRUU.Index_Daily_Return[i])
  merged_data$portfolio_value[i] <- merged_data$portfolio_equity_value[i] + merged_data$portfolio_bond_value[i]
}
# Rebalancing logic
for (i in 2:nrow(merged_data)) {
  if (merged_data$Dates[i] %in% merged_data$end_of_quarter) {
    # Rebalance by adjusting holdings to new allocations based on total portfolio value
    merged_data$portfolio_equity_value[i] <- merged_data$portfolio_value[i] * merged_data$equity_allocation[i]
    merged_data$portfolio_bond_value[i] <- merged_data$portfolio_value[i] * merged_data$bond_allocation[i]
  }
}

# Ensure 'end_of_quarter' dates are correctly identified

# Plotting total portfolio value over time
plot(merged_data$Dates, merged_data$portfolio_value, type = 'l', col = 'blue', main = 'Corrected Portfolio Value Over Time', xlab = 'Date', ylab = 'Portfolio Value')

# Calculate summary statistics
summary_stats <- summary(merged_data$portfolio_value)
print(summary_stats)






# Create a data frame suitable for plotting with ggplot2
allocations <- data.frame(Date = merged_data$Dates,
                          Equity = merged_data$equity_allocation,
                          Bonds = merged_data$bond_allocation)

# Melt the data frame for use with ggplot2
library(reshape2)
allocations_melted <- melt(allocations, id.vars = 'Date')

# Plot using ggplot2
ggplot(allocations_melted, aes(x = Date, y = value, color = variable, group = variable)) +
  geom_line() +
  labs(title = "Portfolio Allocations Over Time",
       x = "Date",
       y = "Allocation",
       color = "Allocation Type") +
  theme_minimal() +
  scale_color_manual(values = c("Equity" = "blue", "Bonds" = "red"))


# Create a data frame with date, equity allocation, and bond allocation
allocations <- data.frame(Date = merged_data$Dates,
                          Equity = merged_data$equity_allocation * 100,  # Convert to percentage
                          Bonds = merged_data$bond_allocation * 100)     # Convert to percentage

# Reshape the data for plotting
allocations_melted <- melt(allocations, id.vars = 'Date', variable.name = 'AllocationType', value.name = 'Percentage')
# Plot the data using ggplot2
ggplot(allocations_melted, aes(x = Date, y = Percentage, fill = AllocationType)) +
  geom_bar(stat = "identity", position = "stack", width = 1) +  # Stacked bar chart
  labs(title = "Portfolio Allocations Over Time",
       x = "Date",
       y = "Allocation Percentage",
       fill = "Allocation Type") +
  theme_minimal() +
  scale_fill_manual(values = c("Equity" = "blue", "Bonds" = "red"))  # Set custom fill colors for bars





# Initialize the 60/40 portfolio
merged_data$sixty_forty_portfolio_value <- 100000

# Calculate daily changes
for (i in 2:nrow(merged_data)) {
  merged_data$sixty_forty_portfolio_value[i] <- merged_data$sixty_forty_portfolio_value[i-1] *
    (1 + 0.6 * merged_data$SPX.Index_Daily_Return[i-1] + 0.4 * merged_data$LBUSTRUU.Index_Daily_Return[i-1])
}

# Initialize the 60/40 portfolio value
merged_data$sixty_forty_portfolio_value <- 100000

# Initialize the equity and bond values based on the 60/40 split
merged_data$sixty_forty_equity_value <- merged_data$sixty_forty_portfolio_value[1] * 0.6
merged_data$sixty_forty_bond_value <- merged_data$sixty_forty_portfolio_value[1] * 0.4

# Calculate daily changes
for (i in 2:nrow(merged_data)) {
  # Update the values based on returns
  merged_data$sixty_forty_equity_value[i] <- merged_data$sixty_forty_equity_value[i-1] * (1 + merged_data$SPX.Index_Daily_Return[i])
  merged_data$sixty_forty_bond_value[i] <- merged_data$sixty_forty_bond_value[i-1] * (1 + merged_data$LBUSTRUU.Index_Daily_Return[i])
  
  # Sum up the new total value
  merged_data$sixty_forty_portfolio_value[i] <- merged_data$sixty_forty_equity_value[i] + merged_data$sixty_forty_bond_value[i]
  
  # Check if the date is the end of a quarter and rebalance if so
  if (merged_data$Dates[i] %in% merged_data$end_of_quarter) {
    # Rebalance to 60/40
    merged_data$sixty_forty_equity_value[i] <- merged_data$sixty_forty_portfolio_value[i] * 0.6
    merged_data$sixty_forty_bond_value[i] <- merged_data$sixty_forty_portfolio_value[i] * 0.4
  }
}

# Assuming merged_data contains a 'Dates' column with Date class or appropriate date format
library(lubridate)  # for date manipulation

# Ensure the Date column is correctly formatted as a Date
merged_data$Date <- as.Date(merged_data$Date, format="%Y-%m-%d")  # Adjust the format string as per your date format

# Initialize the 60/40 portfolio with initial values
merged_data$sixty_forty_portfolio_value <- 100000
merged_data$sixty_forty_equity_value <- merged_data$sixty_forty_portfolio_value[1] * 0.6
merged_data$sixty_forty_bond_value <- merged_data$sixty_forty_portfolio_value[1] * 0.4

# Calculate daily changes and rebalance quarterly
for (i in 2:nrow(merged_data)) {
  # Update the values based on daily returns
  merged_data$sixty_forty_equity_value[i] <- merged_data$sixty_forty_equity_value[i-1] * (1 + merged_data$SPX.Index_Daily_Return[i])
  merged_data$sixty_forty_bond_value[i] <- merged_data$sixty_forty_bond_value[i-1] * (1 + merged_data$LBUSTRUU.Index_Daily_Return[i])
  
  # Update total portfolio value
  merged_data$sixty_forty_portfolio_value[i] <- merged_data$sixty_forty_equity_value[i] + merged_data$sixty_forty_bond_value[i]
  
  # Check if the current date is the first day of a quarter
  #if (day(merged_data$Date[i]) == 1 && month(merged_data$Date[i]) %in% c(1, 4, 7, 10)) {
    # Rebalance to 60/40 split
    #total_value <- merged_data$sixty_forty_portfolio_value[i]
    #merged_data$sixty_forty_equity_value[i] <- total_value * 0.6
    #merged_data$sixty_forty_bond_value[i] <- total_value * 0.4
  }




#METRICS


library(PerformanceAnalytics)
library(xts)
library(dplyr)

calculate_portfolio_metrics <- function(portfolio_values, benchmark_values, dates, risk_free_rate = 0) {
  # Ensure the dates are Date objects and not character or factor
  dates <- as.Date(dates)
  
  # Calculate returns from portfolio values
  portfolio_returns <- calculate_daily_returns(portfolio_values)
  benchmark_returns <- calculate_daily_returns(benchmark_values)
  
  # Create xts objects for portfolio and benchmark returns
  portfolio_xts <- xts(portfolio_returns, order.by = dates)
  benchmark_xts <- xts(benchmark_returns, order.by = dates)
  
  # Define functions to calculate metrics
  annualized_return <- function(returns) {
    (1 + mean(returns, na.rm = TRUE))^252 - 1  # Assumes 252 trading days per year
  }
  
  annualized_volatility <- function(returns) {
    sd(returns, na.rm = TRUE) * sqrt(252)  # Annualizing the standard deviation
  }
  
  max_drawdown <- function(returns_xts) {
    -PerformanceAnalytics::maxDrawdown(returns_xts)  # Using PerformanceAnalytics
  }
  
  sharpe_ratio <- function(returns_xts) {
    (annualized_return(returns_xts) - risk_free_rate) / annualized_volatility(returns_xts)
  }
  
  # Calculate Beta and Alpha using linear regression (including intercept)
  fit <- lm(portfolio_returns ~ benchmark_returns, na.action = na.exclude)  # Include intercept
  beta <- coef(fit)["benchmark_returns"]
  alpha <- coef(fit)["(Intercept)"]  # Corrected to use the estimate
  
  # Create and return the metrics list
  metrics <- list(
    annualized_return_portfolio = annualized_return(portfolio_returns),
    annualized_return_benchmark = annualized_return(benchmark_returns),
    annualized_vol_portfolio = annualized_volatility(portfolio_returns),
    annualized_vol_benchmark = annualized_volatility(benchmark_returns),
    max_drawdown_portfolio = max_drawdown(portfolio_xts),
    max_drawdown_benchmark = max_drawdown(benchmark_xts),
    sharpe_ratio_portfolio = sharpe_ratio(portfolio_xts),
    sharpe_ratio_benchmark = sharpe_ratio(benchmark_xts),
    beta = beta,
    alpha = alpha
  )
  
  return(metrics)
}

# Assume 'merged_data' contains appropriate columns 'portfolio_value', 'sixty_forty_portfolio_value', 'Dates'
dates <- as.Date(merged_data$Dates)
metrics <- calculate_portfolio_metrics(
  merged_data$portfolio_value, 
  merged_data$sixty_forty_portfolio_value,
  dates
)

# Print the metrics
print(metrics)


library(dplyr)
library(lubridate)
library(zoo)  # For as.yearqtr and aggregation

calculate_quarterly_alpha <- function(data, portfolio_col, benchmark_col) {
  # Ensure date is in Date format
  data$Dates <- as.Date(data$Dates)
  
  # Aggregate to quarterly data by taking the last value each quarter
  data_quarterly <- data %>%
    group_by(quarter = as.yearqtr(Dates)) %>%
    summarise(
      portfolio_end = last(get(portfolio_col)),
      benchmark_end = last(get(benchmark_col)),
      .groups = 'drop'
    )
  
  # Calculate quarterly returns
  data_quarterly <- data_quarterly %>%
    mutate(
      portfolio_return = (portfolio_end / lag(portfolio_end) - 1),
      benchmark_return = (benchmark_end / lag(benchmark_end) - 1),
      alpha = portfolio_return - benchmark_return
    )
  
  return(data_quarterly)
}

# Example usage with a hypothetical 'merged_data' dataframe
# merged_data should have columns named 'portfolio_value', 'sixty_forty_portfolio_value', and 'Dates'
results <- calculate_quarterly_alpha(merged_data, "portfolio_value", "sixty_forty_portfolio_value")

# View results
print(results)



# Ensure that the results have the quarter information as a character for plotting
results$quarter <- as.character(results$quarter)

# Creating the bar graph
ggplot(results, aes(x = quarter, y = alpha, fill = alpha > 0)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  scale_fill_manual(values = c("red", "green")) +
  labs(title = "Quarterly Alpha Performance",
       x = "Quarter",
       y = "Alpha (Difference in Returns)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improve x-axis labels visibility






















# Sample Data Frame
# data <- data.frame(Date = as.Date('2023-01-01') + 0:364, SPX_Daily_Returns = rnorm(365, 0.0005, 0.01))
# Make sure to replace the sample generation with your actual data loading method

# Initialize the portfolio
initial_investment <- 100000
merged_data$spx_portfolio <- initial_investment

# Calculate daily portfolio values based on SPX daily returns
for (i in 2:nrow(merged_data)) {
  merged_data$spx_portfolio[i] <- merged_data$spx_portfolio[i - 1] * (1 + merged_data$SPX.Index_Daily_Return[i])
}

# View the final portion of the data to see the ending value
tail(data)











# Create a data frame for plotting
portfolio_values <- data.frame(
  Dates = merged_data$Dates,
  TAA_Value = merged_data$portfolio_value,
  SixtyForty_Value = merged_data$sixty_forty_portfolio_value
)

# Melt the data frame for ggplot2
library(reshape2)
portfolio_values_melted <- melt(portfolio_values, id.vars = 'Dates', variable.name = 'PortfolioType', value.name = 'PortfolioValue')

# Plot the data
library(ggplot2)
ggplot(portfolio_values_melted, aes(x = Dates, y = PortfolioValue, color = PortfolioType)) +
  geom_line() +
  labs(title = "Comparison of TAA Portfolio vs. 60/40 Portfolio",
       x = "Date",
       y = "Portfolio Value ($)",
       color = "Portfolio Type") +
  theme_minimal() +
  scale_color_manual(values = c("TAA_Value" = "blue", "SixtyForty_Value" = "red"))




# Initialize the all-equity portfolio
merged_data$all_equity_portfolio_value <- 100000

# Calculate daily changes based on equity returns
for (i in 2:nrow(merged_data)) {
  merged_data$all_equity_portfolio_value[i] <- merged_data$all_equity_portfolio_value[i-1] * 
    (1 + merged_data$SPX.Index_Daily_Return[i-1])
}

# Consolidate portfolio values
portfolio_values <- data.frame(
  Dates = merged_data$Dates,
  TAA_Value = merged_data$portfolio_value,
  SixtyForty_Value = merged_data$sixty_forty_portfolio_value,
  AllEquity_Value = merged_data$all_equity_portfolio_value
)

# Melt the data frame for ggplot2
library(reshape2)
portfolio_values_melted <- melt(portfolio_values, id.vars = 'Dates', variable.name = 'PortfolioType', value.name = 'PortfolioValue')
# Plot the data
library(ggplot2)
ggplot(portfolio_values_melted, aes(x = Dates, y = PortfolioValue, color = PortfolioType)) +
  geom_line() +
  labs(title = "Comparison of TAA, 60/40, and All-Equity Portfolios",
       x = "Date",
       y = "Portfolio Value ($)",
       color = "Portfolio Type") +
  theme_minimal() +
  scale_color_manual(values = c("TAA_Value" = "blue", "SixtyForty_Value" = "red", "AllEquity_Value" = "black"))

