def runFactorPortfolio3(startDate, endDate, numBetaLookbackDays, numBetaGroupingDays, investmentStrategy='C'):
    print("running...")
    # print(endDate)
    original_startdate_obj = datetime.fromisoformat(startDate)
    print("running...")
    # Format the datetime object as a string in the desired format
    startDate = original_startdate_obj.strftime("%m/%d/%Y")
    
    original_enddate_obj = datetime.fromisoformat(endDate)

    # Format the datetime object as a string in the desired format
    endDate = original_enddate_obj.strftime("%m/%d/%Y")
    # print(startDate)
    if startDate[-7] == '0':
        startDate = startDate[:-7] + startDate[-7 + 1:]
        
    if endDate[-7] == '0':
        endDate = endDate[:-7] + endDate[-7 + 1:]

    
    if(startDate[0] == '0'):
        startDate = startDate[1:]
    # print(startDate)
    
    if(endDate[0] == '0'):
        endDate = endDate[1:]
    # print(endDate)
    print("running...")

    fileData = parse_csv_to_dataframe("test3.csv")
    stockList = []

    for key in fileData.keys():
        stockList.append(key)

    # print(len(stockList))
    
    # fileData['Dates'] = convert_to_datetime3(fileData['Dates'])

    dailyReturnsDf, dailyReturnsDates = createDailyReturnDF(fileData, stockList, "a", startDate,endDate) #"6/1/2012","3/6/2023", 
    # print("made returns df")
    # print(dailyReturnsDf)

    # print(dailyReturnsDf)
    print("returns df")
    print(dailyReturnsDf)





    benchMarkData = parse_csv_to_dataframe("MarketData.csv")
    # print("got benchmark data")

    benchMarkList = []

    for key in benchMarkData.keys():
        benchMarkList.append(key)



    benchmarkReturnsDf, benchMarkReturnsDates = createDailyReturnDF(benchMarkData, benchMarkList, "a", startDate,endDate) #1/3/2023, "6/1/2012","3/6/2023"
    # print("made benchmark returns data")
    print("market returns")
    print(benchmarkReturnsDf)

    dates = dailyReturnsDf["Dates"].tolist()


    print("making betas dfs")

    # dailyBetasDF, betaDates = makeDailyBetaDfs(dailyReturnsDf, benchmarkReturnsDf, stockList, dates, numBetaLookbackDays, numBetaGroupingDays)
    
    # dailyBetasDF, betaDates = makeDailyBetaDfs(dailyReturnsDf, benchmarkReturnsDf, stockList, dates, numBetaLookbackDays, numBetaGroupingDays)

    
    
    # dailyBetasDF = makeDailyBetaDfs(dailyReturnsDf, benchmarkReturnsDf, stockList, dates, numBetaLookbackDays, numBetaGroupingDays)

    # dailyBetasDF.to_csv('lookback3YearGroupingDaily.csv', index=False)
    # dailyBetasDF = pd.read_csv('lookback1YearGroupingMonthly.csv')
    # print(dailyBetasDF)
    
    # print(numBetaLookbackDays)
    # print(numBetaGroupingDays)

    if numBetaLookbackDays == 252:
        if numBetaGroupingDays == 28:
            dailyBetasDF = pd.read_csv('lookback1YearGroupingMonthly.csv')
        else:
            dailyBetasDF = pd.read_csv('lookback1YearGroupingDaily.csv')
    elif numBetaLookbackDays == 756:
        if numBetaGroupingDays == 28:
            dailyBetasDF = pd.read_csv('lookback3YearGroupingMonthly.csv')
        else:
            dailyBetasDF = pd.read_csv('lookback3YearGroupingDaily.csv')
    else:
        if numBetaGroupingDays == 28:
            dailyBetasDF = pd.read_csv('lookback.5YearGroupingMonthly.csv')
        else:
            dailyBetasDF = pd.read_csv('lookback.5YearGroupingDaily.csv')


    
    
    betaDates = dailyBetasDF['Dates'].tolist()
    # print(betaDates)
    # betaDateStartIndex = betaDates.index(startDate)
    # betaDateEndIndex = betaDates.index(endDate)
    
    # betaDates = betaDates[betaDateStartIndex:betaDateEndIndex+1]
    


    betaDates = convert_to_datetime2(betaDates)
    
    # print(betaDates)
    
    # print(startDate)
    # print(endDate)
    
    
    # # startDate = convert_to_datetime(startDate)
    # # endDate = convert_to_datetime(endDate)
    
    
    # startDate = datetime.strptime(startDate, "%m/%d/%Y")
    # endDate = datetime.strptime(endDate, "%m/%d/%Y")

    
    
    
    
    
    # print(startDate)
    # print(endDate)
    
    
    
    
    # betaDateStartIndex = betaDates.index(startDate)
    # betaDateEndIndex = betaDates.index(endDate)
    
    # betaDates = betaDates[betaDateStartIndex:betaDateEndIndex+1]
    
    
    
    
    
    dailyBetasDF["Dates"] = convert_to_datetime2(dailyBetasDF["Dates"])
    # dfStartIndex = dailyBetasDF["Dates"][dailyBetasDF["Dates"] == startDate].index[0]
    # dfEndIndex = dailyBetasDF["Dates"][dailyBetasDF["Dates"] == endDate].index[0]
    # dailyBetasDF = dailyBetasDF.iloc[dfStartIndex: dfEndIndex +1]

    # print(type(betaDates))
    # print("here is daily betas df")


    betaQuarterChangesDates = getQuarterDates(betaDates)
    # print(betaQuarterChangesDates)
    
    
    
    # z = dailyBetasDF.loc[dailyBetasDF["Dates"] == "2011-03-31"].index[0]
    # print(dailyBetasDF["Dates"])
    
    print("check")
    print(betaQuarterChangesDates)
    print(dailyBetasDF)
    

    high_beta_names, low_beta_names = getLongAndShortBetaPositions(betaQuarterChangesDates, dailyBetasDF)
    print("made high/low beta names")

    # min_var_portfolios = minVarFactorPorfolio(high_beta_names, low_beta_names, betaQuarterChangesDates, dailyReturnsDf, stockList, betaDates)

    
    print("betaDates")
    print(betaDates)
    
    print("quarter change dates")
    print(betaQuarterChangesDates)
    
    
    
    
    if investmentStrategy == 'L':
        min_var_portfolios = minVarFactorPorfolioLong(high_beta_names, low_beta_names, betaQuarterChangesDates, dailyReturnsDf, stockList, betaDates)
    elif investmentStrategy == 'S':
        min_var_portfolios = minVarFactorPorfolioShort(high_beta_names, low_beta_names, betaQuarterChangesDates, dailyReturnsDf, stockList, betaDates)
    else:
        min_var_portfolios = minVarFactorPorfolio(high_beta_names, low_beta_names, betaQuarterChangesDates, dailyReturnsDf, stockList, betaDates)

    # print("here is our combined portfolio")
    # print(min_var_portfolios)
    print("made minVar portfolios")
    combined_min_var_dataframe = pd.concat(min_var_portfolios, ignore_index= True)
    # print(combined_min_var_dataframe)

    print("Combined portfolios...")
    print(combined_min_var_dataframe)


    factorDatesList = combined_min_var_dataframe["Dates"].tolist()
    factorStartDate = factorDatesList[0]
    factorEndDate = factorDatesList[-1]
    splicedMarketDF = spliceMarketDF(benchMarkData, factorStartDate, factorEndDate)
    marketDFPriceDF = normalizePrice(splicedMarketDF)
    # print(marketDFPriceDF)

    # print("DATE RANGE")
    # print(factorStartDate)
    # print(factorEndDate)
    # print(" ")

    total_sharpe = newSharpeRatio(combined_min_var_dataframe, 0)
    # print("ALL VALUES FOR FACTOR PORTFOLIO")
    # print("sharpe ratio")
    # print(total_sharpe)
    # print(" ")

    maxdd = calcMaximumDrawdown(combined_min_var_dataframe)
    # print("Max drawdown")
    # print(maxdd)
    # print(" ")

    volatility = calcVolatility(combined_min_var_dataframe)
    # print("annual volatility")
    # print(volatility)
    # print(" ")


    numYears = len(factorDatesList) / 252

    yearlyReturn = calcYearlyReturn(combined_min_var_dataframe, numYears)
    # print("yearly return")
    # print(yearlyReturn)
    # print(" ")


    portfolio_daily_returns = pricesToDailyReturns(combined_min_var_dataframe, ["Portfolio"])

    beta = calcFactorBeta(portfolio_daily_returns, benchmarkReturnsDf)
    # print("beta")
    # print(beta)
    # print(" ")

    # print("ALL VALUES FOR BENCHMARK")
    BM_sharpe = newSharpeRatio(splicedMarketDF, 0)
    # print("sharpe ratio")
    # print(BM_sharpe)
    # print(" ")

    BM_maxdd = calcMaximumDrawdown(splicedMarketDF)
    # print("max DD")
    # print(BM_maxdd)
    # print(" ")

    BM_volatility = calcVolatility(splicedMarketDF)
    # print("volatility")
    # print(BM_volatility)
    # print(" ")

    BM_yearly_return = calcYearlyReturn(splicedMarketDF, numYears)
    # print("Yearly return")
    # print(BM_yearly_return)
    # print(" ")

    alphaDifference = yearlyReturn - BM_yearly_return

    # print("ALPHA DIFFERENCE")
    # print(alphaDifference)


    # graphPriceData(combined_min_var_dataframe, marketDFPriceDF)
    listOfStuffToPrint = ["DATE RANGE", factorStartDate, factorEndDate, "ALL VALUES FOR FACTOR PORTFOLIO", "sharpe ratio", total_sharpe, "Max drawdown", maxdd, "annual volatility", volatility, "yearly return", yearlyReturn, "beta", beta, "ALL VALUES FOR BENCHMARK", "sharpe ratio", BM_sharpe, "max DD", BM_maxdd, "volatility", BM_volatility, "Yearly return", BM_yearly_return,"ALPHA DIFFERENCE", alphaDifference]
    
    # a = listOfStuffToPrint[::2]
    # b = listOfStuffToPrint[1::2]
    
    ourPortfolio = [total_sharpe, maxdd, volatility,yearlyReturn, beta, yearlyReturn - BM_yearly_return]
    bm = [BM_sharpe, BM_maxdd, BM_volatility, BM_yearly_return, 1, BM_yearly_return - yearlyReturn]
    measures = ["Sharpe Ratio", "Max Drawdown", "Volatility", "Yearly Return", "Beta", "Alpha"]
    
    # print(len(a))
    # print(len(b))
    # for i in range(len(a)):
    #     print(a[i])
    #     print(b[i])
    
    outputDF = pd.DataFrame({
    'Measures': measures,
    'Our Portfolio': ourPortfolio, 
    'Benchmark': bm    
})
    # print(df)
    
    portfolioXVals = combined_min_var_dataframe['Dates'].tolist()
    portfolioYVals = combined_min_var_dataframe['Portfolio'].tolist()

    marketXVals = marketDFPriceDF['Dates'].tolist()
    marketYVals = marketDFPriceDF['SPX Index'].tolist()

    # print(marketDFPriceDF)
    # for i in range(len(marketXVals) // 4):
    #     print(f'D: {portfolioXVals[i]}. P:{portfolioYVals[i]}')
    # graphPriceData(combined_min_var_dataframe, marketDFPriceDF)
    
    print(combined_min_var_dataframe)

    
    return outputDF, portfolioXVals, portfolioYVals, marketXVals, marketYVals
    















def getLongAndShortBetaPositions(betaQuarterChangeDates, dailyBetasDf):
    
    absolute_value_betas_df = dailyBetasDf.apply(absolute_value_except_first, axis=1)
    
    list_of_high_beta_names = []
    list_of_low_beta_names = []


    print(betaQuarterChangeDates)
    print(dailyBetasDf)
    # print(absolute_value_betas_df)
    
    for date in betaQuarterChangeDates:
        print(date)
        # print(betaQuarterChangeDates)
        index_of_date = dailyBetasDf.loc[dailyBetasDf['Dates'] == date].index[0]
        # print(date)
        # print(index_of_date)
        # print(dailyBetasDf.loc[dailyBetasDf['Dates'] == date])
        # row = dailyBetasDf.loc[dailyBetasDf['Dates'] == date]
        row = absolute_value_betas_df.iloc[index_of_date]
        # row = dailyBetasDf.iloc[index_of_date]


        
        row_values = row.iloc[1:]
        
        # row_values = row_values.values.flatten()

        
        # row_values = pd.Series(row_values)


        row_values_numeric = pd.to_numeric(row_values, errors='coerce')


        highest_betas = row_values_numeric.nlargest(10)
        highest_betas_names = highest_betas.index.tolist()
        list_of_high_beta_names.append(highest_betas_names)

        lowest_betas = row_values_numeric.nsmallest(10)
        lowest_betas_names = lowest_betas.index.tolist()
        list_of_low_beta_names.append(lowest_betas_names)

    return list_of_high_beta_names, list_of_low_beta_names
    

def minVarFactorPorfolio(list_of_high_beta_names, list_of_low_beta_names, betaQuarterChangeDates, dailyReturnsDf, stockList, betaDates):

    min_var_portfolios = []

    stock_dates_all = dailyReturnsDf["Dates"].tolist()
    stock_dates_all_objects = convert_to_datetime(stock_dates_all)

    
    for i in range(len(betaQuarterChangeDates)):
        quarter_start_date = betaQuarterChangeDates[i]
        if i == len(betaQuarterChangeDates) -1:
            quarter_end_date = betaDates[-1]
        else:
            # print(i)
            # print(len(betaQuarterChangeDates))
            # print("check")
            quarter_end_date = betaQuarterChangeDates[i+1]
        
        dates_section_start_index = betaDates.index(quarter_start_date)
        dates_section_end_index = betaDates.index(quarter_end_date)
        dates_section_end_index -=1
        dates_section = betaDates[dates_section_start_index: dates_section_end_index +1] #i got rid of the plus 1 here, so i dont access the last date. Not true <-
        if i == 0:
            total_portfolio_value = 100
            start_quarter_price = total_portfolio_value / 20
        else:
            total_portfolio_value = min_var_portfolios[i-1].iloc[-1]["Portfolio"]
            start_quarter_price = total_portfolio_value / 20

        all_stock_prices_list = []
        
        for stock in stockList[1:]:
            if stock in list_of_low_beta_names[i]: #uses reguar daily return
                stock_price_list = [start_quarter_price]
                stock_daily_returns_all = dailyReturnsDf[stock].tolist()
                daily_return_start_index = stock_dates_all_objects.index(quarter_start_date)
                daily_return_end_index = stock_dates_all_objects.index(quarter_end_date)
                stock_daily_returns_section = stock_daily_returns_all[daily_return_start_index: daily_return_end_index] # deleted the +1

                investment = 1
            
            elif stock in list_of_high_beta_names[i]: #uses negative daily return, showing a short position
                
                stock_price_list = [start_quarter_price]
                stock_daily_returns_all = dailyReturnsDf[stock].tolist()
                daily_return_start_index = stock_dates_all_objects.index(quarter_start_date)
                daily_return_end_index = stock_dates_all_objects.index(quarter_end_date)
                # print(len(stock_daily_returns_all))
                # print(len(stock_dates_all_objects))
                # print(len(betaDates))
                # qq
                stock_daily_returns_section = stock_daily_returns_all[daily_return_start_index: daily_return_end_index] #deleted plus 1 
                investment = 2
                # if stock == 'BLACKROCK INC':
                #     print(quarter_start_date)
                #     print(daily_return_start_index)
                #     print(daily_return_end_index)
                #     ll
            else:
                stock_price_list = [0]
                stock_daily_returns_all = dailyReturnsDf[stock].tolist()
                #print(stock_dates_all_objects)
                daily_return_start_index = stock_dates_all_objects.index(quarter_start_date)
                daily_return_end_index = stock_dates_all_objects.index(quarter_end_date)
                stock_daily_returns_section = stock_daily_returns_all[daily_return_start_index: daily_return_end_index]
                investment = 0

            for daily_return in stock_daily_returns_section:
                # if daily_return == 1.005544:
                #     print(stock)
                #     oo
                if investment == 1:
                    # if np.isnan(daily_return):
                    #     print("l")
                    #     print(daily_return)
                    #     daily_return = 1
                    #     print(daily_return)
                    #     print(stock_price_list)
                    #     stock_price = stock_price_list[-1] * daily_return
                    #     print(stock_price)
                        
                    # else:
                    if np.isnan(stock_price_list[-1]):
                        print(f'Nan val for long')
                        print(stock)
                        # qpwpwp
                    stock_price = stock_price_list[-1] * daily_return
                    stock_price_list.append(stock_price)
                    # if stock_price_list[-1] > 10:
                    #     print(stock_price_list)
                    #     print(stock_daily_returns_section)
                    #     pp
                elif investment == 2:
                    # if np.isnan(daily_return):
                    #     print("s")
                    #     print(daily_return)
                    #     daily_return = 1
                    #     print(daily_return)
                    
                    if np.isnan(stock_price_list[-1]):
                        stock_price_list[-1] = stock_price_list[-2]
                        print(f'Nan val for short')
                        print(stock)
                        
                    short_daily_return = 2 - daily_return 
                    stock_price = stock_price_list[-1] * short_daily_return
                    stock_price_list.append(stock_price)
                    # if stock == 'BLACKROCK INC':
                    #     print(daily_return)
                    #     print(short_daily_return)
                    #     print(stock_price)
                    #     if i == 1:
                    #         zz
                        
                else:
                    stock_price_list.append(0)
                    # if stock == 'BUILDERS FIRSTSOURCE INC':
                    #     print(daily_return)
                    #     zz
            
            stock_price_list.pop(-1) #i used to pop 0

            all_stock_prices_list.append(stock_price_list)
            
        min_var_data_dict_section = {"Dates": dates_section}
        

        
        for i, stock_name in enumerate(stockList[1:], start=1):
            min_var_data_dict_section[stock_name] = all_stock_prices_list[i-1]
            
        # print(len(min_var_data_dict_section['Dates']))
        # print(len(min_var_data_dict_section['BLACKROCK INC']))
        # print(min_var_data_dict_section['BLACKROCK INC'])
        # print("foo")
        # print(dates_section)
        min_var_data_dict_section_DF = pd.DataFrame(min_var_data_dict_section)

        z = 0
        
        portfolio_values = []
        
        for date in dates_section:
            portfolio_value_at_date = 0

            for stock in stockList[1:]:
                date_index = min_var_data_dict_section_DF[stock].loc[min_var_data_dict_section_DF["Dates"] == date].index[0]
                stock_value_at_date = min_var_data_dict_section_DF.loc[date_index, stock]
                # if np.isnan(stock_value_at_date):
                #     listofvals = min_var_data_dict_section_DF[stock].tolist()
                #     print(listofvals)
                #     print(stock_value_at_date)
                #     print(date)
                #     print("check")
                #     print(z)
                #     print(stock)
                #     ad
                #     z+=1
                portfolio_value_at_date += stock_value_at_date
            #     if np.isnan(portfolio_value_at_date):
            #         print(stock)
            #         qq
            # if np.isnan(portfolio_value_at_date):
            #     print(date)
            #     aa
                    
            portfolio_values.append(portfolio_value_at_date)
        
        min_var_data_dict_section_DF.insert(1, "Portfolio", portfolio_values)
            
        min_var_portfolios.append(min_var_data_dict_section_DF)
        
        

        
    return min_var_portfolios